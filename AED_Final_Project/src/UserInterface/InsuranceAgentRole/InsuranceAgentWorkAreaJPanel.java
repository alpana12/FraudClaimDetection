/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.InsuranceAgentRole;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Insurance.ClaimDirectory;
import Business.Insurance.Policy;
import Business.Insurance.PolicyDirectory;
import Business.Organization.CustomerOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CustomerClaimRequest;
import Business.WorkQueue.CustomerPolicyRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;

/**
 *
 * @author anusha
 */
public class InsuranceAgentWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form InsuranceAgentWorkAreaJPanel
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    EcoSystem system;
    UserAccount userAccount;
    Organization organization;
    Customer customer;
    int policyId;
    Policy policy;
    

//userProcessContainer, enterprise, business, account
    public InsuranceAgentWorkAreaJPanel(JPanel userProcessContainer, Enterprise enterprise, EcoSystem system, UserAccount userAccount, Organization organization) {
    initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.system = system;
        this.userAccount = userAccount;
        this.organization = organization;
        
        populateAllRequestsTable();
        populateMyRequestsTable();
    }

     public void populateAllRequestsTable(){
         DefaultTableModel model = (DefaultTableModel)agentAllRequestsJTable.getModel();
         model.setRowCount(0);
         
             for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request instanceof CustomerPolicyRequest) {
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getSender();
                row[2] = "Policy";
                row[3] = request.getReceiver();
                row[4] = request.getRequestDate();
                model.addRow(row);
            }else if (request instanceof CustomerClaimRequest) {
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getSender();
                row[2] = "Claim";
                row[3] = request.getReceiver();
                row[4] = request.getRequestDate();
                model.addRow(row);
            }

        }
     }
     
     public void populateMyRequestsTable(){
         DefaultTableModel model = (DefaultTableModel)agentMyRequestsJTable.getModel();
         model.setRowCount(0);
         
            for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
                if(request.getReceiver() == userAccount){
                if (request instanceof CustomerPolicyRequest) {
                    
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getSender();
                row[2] = "Policy";
                row[3] = request.getReceiver();
                row[4] = request.getRequestDate();
                model.addRow(row);}
            else if (request instanceof CustomerClaimRequest) {
               
                    
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getSender();
                row[2] = "Claim";
                row[3] = request.getReceiver();
                row[4] = request.getRequestDate();
                model.addRow(row);
            }
            }

        }
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        allWorkRequestJPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        agentAllRequestsJTable = new javax.swing.JTable();
        assignRequestJButton = new javax.swing.JButton();
        myWorkRequestJPanel = new javax.swing.JPanel();
        newClaimJButton = new javax.swing.JButton();
        newPolicyJButton = new javax.swing.JButton();
        agentRefreshJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        agentMyRequestsJTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();

        jLabel1.setText("Insurance Agent Work Area");

        agentAllRequestsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Customer Name", "Type of Request", "Assigned To", "Request Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(agentAllRequestsJTable);
        if (agentAllRequestsJTable.getColumnModel().getColumnCount() > 0) {
            agentAllRequestsJTable.getColumnModel().getColumn(0).setResizable(false);
            agentAllRequestsJTable.getColumnModel().getColumn(1).setResizable(false);
            agentAllRequestsJTable.getColumnModel().getColumn(2).setResizable(false);
            agentAllRequestsJTable.getColumnModel().getColumn(3).setResizable(false);
            agentAllRequestsJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        assignRequestJButton.setText("Assign");
        assignRequestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignRequestJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout allWorkRequestJPanelLayout = new javax.swing.GroupLayout(allWorkRequestJPanel);
        allWorkRequestJPanel.setLayout(allWorkRequestJPanelLayout);
        allWorkRequestJPanelLayout.setHorizontalGroup(
            allWorkRequestJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allWorkRequestJPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(allWorkRequestJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allWorkRequestJPanelLayout.createSequentialGroup()
                        .addComponent(assignRequestJButton)
                        .addGap(123, 123, 123))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allWorkRequestJPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))))
        );
        allWorkRequestJPanelLayout.setVerticalGroup(
            allWorkRequestJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allWorkRequestJPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(assignRequestJButton)
                .addContainerGap(119, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("All Requests", allWorkRequestJPanel);

        newClaimJButton.setText("New Claim");
        newClaimJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newClaimJButtonActionPerformed(evt);
            }
        });

        newPolicyJButton.setText("New Policy");
        newPolicyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPolicyJButtonActionPerformed(evt);
            }
        });

        agentRefreshJButton.setText("Refresh");

        agentMyRequestsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Customer Name", "Type of Request", "Assigned To", "Request Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(agentMyRequestsJTable);
        if (agentMyRequestsJTable.getColumnModel().getColumnCount() > 0) {
            agentMyRequestsJTable.getColumnModel().getColumn(0).setResizable(false);
            agentMyRequestsJTable.getColumnModel().getColumn(1).setResizable(false);
            agentMyRequestsJTable.getColumnModel().getColumn(2).setResizable(false);
            agentMyRequestsJTable.getColumnModel().getColumn(3).setResizable(false);
            agentMyRequestsJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout myWorkRequestJPanelLayout = new javax.swing.GroupLayout(myWorkRequestJPanel);
        myWorkRequestJPanel.setLayout(myWorkRequestJPanelLayout);
        myWorkRequestJPanelLayout.setHorizontalGroup(
            myWorkRequestJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, myWorkRequestJPanelLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(myWorkRequestJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(myWorkRequestJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(agentRefreshJButton)
                        .addGroup(myWorkRequestJPanelLayout.createSequentialGroup()
                            .addComponent(newClaimJButton)
                            .addGap(385, 385, 385)
                            .addComponent(newPolicyJButton)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );
        myWorkRequestJPanelLayout.setVerticalGroup(
            myWorkRequestJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, myWorkRequestJPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(agentRefreshJButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(myWorkRequestJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newClaimJButton)
                    .addComponent(newPolicyJButton))
                .addGap(70, 70, 70))
        );

        jTabbedPane1.addTab("My Requests", myWorkRequestJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newPolicyJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPolicyJButtonActionPerformed
        // TODO add your handling code here:
        int selectedrow = agentMyRequestsJTable.getSelectedRow();
        if (selectedrow >= 0)
        {
            WorkRequest request1 = (WorkRequest)agentAllRequestsJTable.getValueAt(selectedrow, 0);
            customer = ((CustomerPolicyRequest) request1).getCustomer();
            policy = ((CustomerPolicyRequest) request1).getPolicy();
            NewPolicyJPanel newPolicyJPanel = new NewPolicyJPanel(userProcessContainer, enterprise, system,userAccount, organization,(CustomerPolicyRequest) request1);
            userProcessContainer.add("newPolicyJPanel", newPolicyJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            
        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Please select one row","Warning" , JOptionPane.WARNING_MESSAGE);
        }
        
        
       
    }//GEN-LAST:event_newPolicyJButtonActionPerformed

    private void newClaimJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newClaimJButtonActionPerformed
        // TODO add your handling code here:
            int selectedrow = agentMyRequestsJTable.getSelectedRow();
        if (selectedrow >= 0)
        {
            WorkRequest request1 = (WorkRequest)agentMyRequestsJTable.getValueAt(selectedrow, 0);
        NewClaimJPanel newClaimJPanel = new NewClaimJPanel(userProcessContainer, enterprise, system,userAccount, organization, (CustomerClaimRequest) request1);
        userProcessContainer.add("newClaimJPanel", newClaimJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
             }
        else 
        {
            JOptionPane.showMessageDialog(null, "Please select one row","Warning" , JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_newClaimJButtonActionPerformed

    private void assignRequestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignRequestJButtonActionPerformed
        // TODO add your handling code here:
        int selectedrow = agentAllRequestsJTable.getSelectedRow();
        if (selectedrow >= 0)
        {
            WorkRequest request1 = (WorkRequest)agentAllRequestsJTable.getValueAt(selectedrow, 0);
            request1.setReceiver(userAccount);
            populateMyRequestsTable();
            populateAllRequestsTable();
            
        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Please select one row","Warning" , JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_assignRequestJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable agentAllRequestsJTable;
    private javax.swing.JTable agentMyRequestsJTable;
    private javax.swing.JButton agentRefreshJButton;
    private javax.swing.JPanel allWorkRequestJPanel;
    private javax.swing.JButton assignRequestJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel myWorkRequestJPanel;
    private javax.swing.JButton newClaimJButton;
    private javax.swing.JButton newPolicyJButton;
    // End of variables declaration//GEN-END:variables
}
