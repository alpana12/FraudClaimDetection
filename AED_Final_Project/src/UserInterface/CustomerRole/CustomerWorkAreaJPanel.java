/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerRole;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.InsuranceEnterprise;
import Business.Network.Network;
import Business.Organization.CustomerOrganization;
import Business.Organization.InsuranceAgentOrganization;
import Business.Organization.InsuranceApproverOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CustomerClaimRequest;
import Business.WorkQueue.CustomerPolicyRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hp
 */
public class CustomerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerWorkAreaJPanel
     */
  private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem ecosystem;
private CustomerOrganization organization;

    public CustomerWorkAreaJPanel(JPanel userProcessContainer, Enterprise enterprise, UserAccount userAccount, EcoSystem ecosystem, CustomerOrganization organization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.ecosystem = ecosystem;
        this.organization = organization;
               
       populateRequestTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customerWorkAreaJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        policyDetailsJTable = new javax.swing.JTable();
        requestClaimJButton = new javax.swing.JButton();
        requestPolicyJButton = new javax.swing.JButton();

        customerWorkAreaJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        customerWorkAreaJLabel.setText("Customer Work Area");

        policyDetailsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Request Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(policyDetailsJTable);
        if (policyDetailsJTable.getColumnModel().getColumnCount() > 0) {
            policyDetailsJTable.getColumnModel().getColumn(1).setResizable(false);
        }

        requestClaimJButton.setText("Request Claim");
        requestClaimJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestClaimJButtonActionPerformed(evt);
            }
        });

        requestPolicyJButton.setText("Request Policy");
        requestPolicyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestPolicyJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(customerWorkAreaJLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(requestClaimJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(requestPolicyJButton)))))
                .addGap(295, 295, 295))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(customerWorkAreaJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestPolicyJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requestClaimJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(187, 187, 187))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestClaimJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestClaimJButtonActionPerformed
        // TODO add your handling code here:

        //        int selectedRow = claimDetailsJTable.getSelectedRow();
        //
        //        if (selectedRow < 0) {
            //            JOptionPane.showMessageDialog(null,"Please select valid policy to request a claim.");
            //            return;
            //        }
        //        CustomerPolicyRequest cprequest = (CustomerPolicyRequest) claimDetailsJTable.getValueAt(selectedRow, 0);
        //        customer = cprequest.getCustomer();

        CustomerClaimRequest ccrequest = new CustomerClaimRequest();
        ccrequest.setSender(userAccount);
        ccrequest.setMessage("Claim Requested");

        Organization org = null;
        for (Network n : ecosystem.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e.getEnterpriseType() == Enterprise.EnterpriseType.Insurance) {
                    e.getWorkQueue().getWorkRequestList().add(ccrequest);
                }
                for (Organization insAgent : e.getOrganizationDirectory().getOrganizationList()) {
                    if (insAgent instanceof InsuranceAgentOrganization) {
                        org = insAgent;
                        org.getWorkQueue().getWorkRequestList().add(ccrequest);
                        userAccount.getWorkQueue().getWorkRequestList().add(ccrequest);
                        JOptionPane.showMessageDialog(null,"Claim Requested Successfully.An agent will contact you shortly.");

                    }
                }
            }
        }
        //        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        //        userProcessContainer.add("InsuranceAgentWorkAreaJPanel", new InsuranceAgentWorkAreaJPanel(userProcessContainer, enterprise, ecosystem, userAccount, organization));
        //        layout.next(userProcessContainer);
               populateRequestTable();

    }//GEN-LAST:event_requestClaimJButtonActionPerformed

    private void requestPolicyJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestPolicyJButtonActionPerformed
        // TODO add your handling code here:
    sendCustomerPolicyRequest();
       populateRequestTable();

    }//GEN-LAST:event_requestPolicyJButtonActionPerformed

    private void sendCustomerPolicyRequest(){
        CustomerPolicyRequest cpr = new CustomerPolicyRequest();
    //    cpr.setCustomer(customer);
        cpr.setSender(userAccount);
        cpr.setMessage("Policy Requested");
          Organization org = null;
        for (Network n : ecosystem.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e.getEnterpriseType() == Enterprise.EnterpriseType.Insurance) {
                    e.getWorkQueue().getWorkRequestList().add(cpr);
                }
                for (Organization insAgent : e.getOrganizationDirectory().getOrganizationList()) {
                    if (insAgent instanceof InsuranceAgentOrganization) {
                        org = insAgent;
                        org.getWorkQueue().getWorkRequestList().add(cpr);
                        userAccount.getWorkQueue().getWorkRequestList().add(cpr);
        JOptionPane.showMessageDialog(null,"Policy Requested Successfully. An agent will contact you shortly.");
                    } 
//                    else {
//                if (insAgent instanceof InsuranceApproverOrganization) {
//                        org = insAgent;
//                        org.getWorkQueue().getWorkRequestList().add(cpr);
//                        userAccount.getWorkQueue().getWorkRequestList().add(cpr);
//                }
//        }   
                }
    }}}
    
     public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) policyDetailsJTable.getModel();
                model.setRowCount(0);

        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
         
            if(request instanceof CustomerPolicyRequest){

            Object[] row = new Object[2];
            row[0] = request;
            row[1] =request.getRequestDate();
            model.addRow(row);

               } else          if(request instanceof CustomerClaimRequest){

            Object[] row = new Object[2];
            row[0] = request;
            row[1] =request.getRequestDate();
            model.addRow(row);

               }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel customerWorkAreaJLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable policyDetailsJTable;
    private javax.swing.JButton requestClaimJButton;
    private javax.swing.JButton requestPolicyJButton;
    // End of variables declaration//GEN-END:variables
}
