/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.InsuranceApproverRole;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.HospitalAdminOrganization;
import Business.Organization.InsuranceInvestigatorOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ApprovalRequest;
import Business.WorkQueue.CustomerClaimRequest;
import Business.WorkQueue.CustomerPolicyRequest;
import Business.WorkQueue.HospitalWorkRequest;
import Business.WorkQueue.WorkRequest;
import UserInterface.InsuranceAgentRole.NewPolicyJPanel;
import UserInterface.InvestigatorRole.VerifyClaimJPanel;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hp
 */
public class InsuranceApproverWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form InsuranceApproverWorkAreaJPanel
     */
    
    JPanel userProcessContainer;
    Enterprise enterprise;
    EcoSystem system;
    UserAccount userAccount;
    Organization organization;
    WorkRequest req;
    
    public InsuranceApproverWorkAreaJPanel(JPanel userProcessContainer, Enterprise enterprise, EcoSystem system, UserAccount userAccount, Organization organization) {
        initComponents();
         this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.system = system;
        this.userAccount = userAccount;
        this.organization = organization;
        populateTable();
    }

         public void populateTable(){
         DefaultTableModel model = (DefaultTableModel)policyJTable.getModel();
         model.setRowCount(0);
             for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request instanceof ApprovalRequest) {
                Object[] row = new Object[2];
                row[0] = request;
                row[1] = ((ApprovalRequest) request).getCustomerName();
                model.addRow(row);
            }

        }
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        policyJTable = new javax.swing.JTable();
        verifyPolicyJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        requestVitalSignJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Insurance Approver Work Area");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 55, -1, -1));

        policyJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Customer Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(policyJTable);
        if (policyJTable.getColumnModel().getColumnCount() > 0) {
            policyJTable.getColumnModel().getColumn(0).setResizable(false);
            policyJTable.getColumnModel().getColumn(1).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 143, 526, 84));

        verifyPolicyJButton.setText("Verify Policy");
        verifyPolicyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyPolicyJButtonActionPerformed(evt);
            }
        });
        add(verifyPolicyJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(403, 245, 144, -1));

        jLabel2.setText("Policy Requests :");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 114, 127, 23));

        requestVitalSignJButton.setText("Request VitalSigns");
        requestVitalSignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestVitalSignJButtonActionPerformed(evt);
            }
        });
        add(requestVitalSignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void verifyPolicyJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyPolicyJButtonActionPerformed
        // TODO add your handling code here:
        try{
        int selectedrow = policyJTable.getSelectedRow();
        if (selectedrow >= 0)
        {
              for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request instanceof ApprovalRequest){
                         request = (ApprovalRequest)policyJTable.getValueAt(selectedrow, 0);
                        VerifySelectedPolicyJPanel verifySelectedPolicyJPanel = new VerifySelectedPolicyJPanel(userProcessContainer, enterprise, (ApprovalRequest) request);
            userProcessContainer.add("verifySelectedPolicyJPanel", verifySelectedPolicyJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);}}

        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Please select one row","Warning" , JOptionPane.WARNING_MESSAGE);
        }
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_verifyPolicyJButtonActionPerformed

    private void requestVitalSignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestVitalSignJButtonActionPerformed
        // TODO add your handling code here:
        try{
        int selectedrow = policyJTable.getSelectedRow();
        if (selectedrow >= 0)
        {
            ApprovalRequest request1 = (ApprovalRequest)policyJTable.getValueAt(selectedrow, 0);
            //HospitalAdminWorkAreaJPanel hospitalAdminWorkAreaJPanel = new HospitalAdminWorkAreaJPanel(userProcessContainer, enterprise,request1);
            //userProcessContainer.add("hospitalAdminWorkAreaJPanel", hospitalAdminWorkAreaJPanel);
            //CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            //layout.next(userProcessContainer);
              Organization org = null;
        for (Network n : system.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e.getEnterpriseType() == Enterprise.EnterpriseType.Hospital) {
                    e.getWorkQueue().getWorkRequestList().add(request1);
                }
                for (Organization insApp : e.getOrganizationDirectory().getOrganizationList()) {
                    if (insApp instanceof HospitalAdminOrganization) {
                        org = insApp;
                        org.getWorkQueue().getWorkRequestList().add(request1);
                        userAccount.getWorkQueue().getWorkRequestList().add(request1);
                    } }}}
        
        JOptionPane.showMessageDialog(null, "Request Sent Successfully.");
        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Please select one row","Warning" , JOptionPane.WARNING_MESSAGE);
        }
        }catch(Exception e){
            System.out.println(e);
        }
        
        
    }//GEN-LAST:event_requestVitalSignJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable policyJTable;
    private javax.swing.JButton requestVitalSignJButton;
    private javax.swing.JButton verifyPolicyJButton;
    // End of variables declaration//GEN-END:variables
}
